import { ActionRow, ActionRowBuilder, ButtonBuilder, ButtonStyle } from "discord.js";   
import {quizzes} from "../../model/quiz.js";
module.exports.data = { 
    name: "bll_quiz",
    description: "Ch∆°i quiz c√πng bololo n√®",
    type: 1,
}

module.exports.execute = async (interaction) => {
    const quiz = quizzes[Math.floor(Math.random() * quizzes.length)];

    const embed = new EmbedBuilder()
      .setTitle("üéØ M c√≥ ph·∫£i th√†nh vi√™n bll thi·ªát k?")
      .setDescription(`üß† **${quiz.question}**\n\nH√£y ch·ªçn m·ªôt ƒë√°p √°n b√™n d∆∞·ªõi:`)
      .setColor("#1a5366ff");
    
    const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId("a").setLabel('a. ${quiz.options.a}').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId("b").setLabel('b. ${quiz.options.b}').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId("c").setLabel('c. ${quiz.options.c}').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId("d").setLabel('d. ${quiz.options.d}').setStyle(ButtonStyle.Primary),
    );

     await interaction.reply({ embeds: [embed], components: [row] });

     const collector = interaction.channel.createMessageComponentCollector({
      filter: (i) => i.user.id === interaction.user.id,
      time: 30000, 
      max: 1,
    });

     collector.on("collect", async (i) => {
        const answer = i.customId;
        const isCorrect = answer === quiz.answer;

        row.components.forEach((btn) => btn.setDisabled(true));
        const resultEmbed = new EmbedBuilder()
            .setTitle("üéØ Quiz c√πng Bololo")
            .setDescription(
            `üß† **${quiz.question}**\n\nC∆∞ng ch·ªçn: **${answer.toUpperCase()}**\n\n${
                isCorrect
                ? "‚úÖ Ch√≠nh x√°c r·ªìi! Ch√∫c m·ª´ng c∆∞ng"
                : "‚ùå Sai r·ªìi! Th·ª≠ l·∫°i l·∫ßn sau nh√© c∆∞ng"
            }`
            )
            .setColor(isCorrect ? "#00FF7F" : "#FF6347");

        await i.update({ embeds: [resultEmbed], components: [row] });
    });

    collector.on("end", async (collected) => {
      if (collected.size === 0) {
        row.components.forEach((btn) => btn.setDisabled(true));
        const timeoutEmbed = new EmbedBuilder()
          .setTitle("‚è∞ H·∫øt th·ªùi gian!")
          .setDescription(`Qu√° g√† n√™n kh√¥ng tr·∫£ l·ªùi k·ªãp r·ªìi c∆∞ng ∆°i!`)
          .setColor("#FFA500");
        await interaction.editReply({ embeds: [timeoutEmbed], components: [row] });
      }
    });


}