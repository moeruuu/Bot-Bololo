module.exports.data = {
    name: "selection",
    description: "Ch·ªçn ny t∆∞∆°ng lai n√®",
    type: 1,
    option: [],
    integration_types: [0],
    contexts: [0, 1, 2],
}

const { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');
const { response } = require('express');
const people = [
    {
        name: "Duy ƒê·∫°i",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Duy ƒê·∫°i! Trai y ng√†y ng·ªß ƒë√™m ƒëi ch∆°i v·ªõi nhi·ªÅu em g√°i!"
    },
    {
        name: "Kim Ng√¢n",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Kim Ng√¢n! G√°i qbu, ƒë√® ra ƒë√≤i ƒë·ª•!"
    },
    {
        name: "ƒê√¨nh Duy",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn ƒê√¨nh Duy! Trai H√† N·ªôi r·ªß b·∫°n ra ƒë·ªÉ ng·ªß chung!"
    },
    {
        name: "T√πng L√¢m",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn T√πng L√¢m! M√¨nh m·∫≠p m·ªù ti·∫øp ƒë∆∞·ª£c kh√¥ng?"
    },
    {
        name: "Zeus",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Zeus! Th√°nh ƒë·ª• c·ªßa nƒÉm"
    },
    {
        name: "Minh Khu·ªìi",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Minh Khu·ªìi! Minh Khu·ªìi ƒëang ch·ªù b·∫°n ƒë·∫°p xe ƒë·∫°p x√∫n Bi√™n H√≤a n√®!"
    },
    {
        name: "Minh ƒê·ª©c",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Minh ƒê·ª©c! Minh ƒê·ª©c ƒëang ch·ªù b·∫°n chat s·∫Ω n√® fen"
    },
    {
        name: "Hi·ªÉn An",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Hi·ªÉn An! Trai ph·ªë nh√¨n t∆∞·ªüng l√† m√¨nh ng·∫ßu l·∫Øm"
    },
    {
        name: "H·ªìng Qu√¢n",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn H·ªìng Qu√¢n! Boy ki·ªÉm so√°t th√®m ƒë·ª•"
    },
    {
        name: "Jun B√πi",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Jun B√πi nh∆∞ng ·∫£nh ƒëang b·∫≠n lo cho t∆∞∆°ng lai ·∫£nh r·ªìi"
    },
    {
        name: "Ph√∫c Tr∆∞·ªùng",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Ph√∫c Tr∆∞·ªùng! D√π th·∫ø n√†o th√¨ ·∫£nh v·∫´n iu nh·ªè kh√°c (& ch∆°i ƒë√°)"
    },
    {
        name: "Minh Ph√∫c",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Minh Ph√∫c! Trai uit th√®m ƒë·ª• nh∆∞ng n·∫øu b·∫°n t·ª´ ch·ªëi th√¨ ·∫£nh b·∫£o: \n'em c·∫ßn hs v·ªõi ng t·ªët h∆°n'"
    },
    {
        name: "ƒê·ª©c L∆∞∆°ng",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn ƒê·ª©c L∆∞∆°ng nh∆∞ng ·∫£nh b·∫≠n qu·∫πt tinder g√°i kh√°c r·ªìi"
    },
    {
        name: "B·∫£o Huy",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn B·∫£o Huy! Stalk b·∫°n c·∫£ khi b·∫°n block ·∫£nh"
    },
    {
        name: "ƒê·ªó Duy",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn ƒê·ªó Duy! ·∫¢nh ghost m·∫π b·∫°n r·ªìi, kh·ªèi t√¨m chi cho m·ªác"
    },
    {
        name: "Khoa Ng",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Khoa Ng nh∆∞ng b·∫°n ƒë√£ ƒë√° ·∫£nh v√¨ b·∫°n th·∫•y ·∫£nh qu√° d·ªët v√† ch√°n"
    },
    {
        name: "Ng·ªçc Linh",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Ng·ªçc Linh! B·∫°n ƒë√£ c√≥ th√™m m·ªôt ng∆∞·ªùi ƒë√≥ng vai n·∫°n nh√¢n trong chuy·ªán t√¨nh c·∫£m"
    },
    {
        name: "Hi·ªÉu Linh",
        response: "Ch√∫c m·ª´ng b·∫°n ƒë√£ ch·ªçn Hi·ªÉu Linh! M·∫∑c d√π c√¥ ·∫•y kh√¥ng th√≠ch b·∫°n nh∆∞ng b·∫°n c≈©ng kh√¥ng ƒë∆∞·ª£c ch·ªçn em kh√°c"
    },
];

const image = [
    'https://i.pinimg.com/474x/52/5b/d5/525bd53a019dded63d73a7fcaa322186.jpg',
    'https://stickerly.pstatic.net/sticker_pack/GKxNn91GyJYvRhMszE6eOQ/FDXTPM/37/-976607614.png',
    'https://i.pinimg.com/564x/85/bd/06/85bd06c324ea37c5eadec42c5927c154.jpg',
    'https://micmictala.wordpress.com/wp-content/uploads/2014/09/ideology-on-love-funny-meme-610x9221.jpg?w=640',
    'https://i.ytimg.com/vi/uqL8Rk43kP8/hq720.jpg?sqp=-oaymwEhCK4FEIIDSFryq4qpAxMIARUAAAAAGAElAADIQj0AgKJD&rs=AOn4CLC0SqNjE0p32_s70gT7Rg9TffA5kQ',
    'https://media.tenor.com/gYve5YxIJHYAAAAM/love.gif',
    'https://sayingimages.com/wp-content/uploads/funny-i-love-you-funny-meme.jpg',
    'https://images3.memedroid.com/images/UPLOADED204/6266b5e7d9e14.jpeg',
    'https://i.redd.it/zm6im9lo45w91.jpg',
    'https://static.boredpanda.com/blog/wp-content/uploads/2018/11/wholesome-loving-relationship-memes-150-5bed968a30965__700.jpg',

]

module.exports.execute = async (interaction) => {
    const shuffled = people.sort(() => 0.5 - Math.random());
    const selectedPeople = shuffled.slice(0, 3);

    const embed = new EmbedBuilder()
        .setTitle('Ch·ªçn b·∫°n ƒë·ªÉ iu n√® m√≠ mom')
        .setDescription('Th·∫•y ai h·ª£p l√Ω th√¨ pick nh√©')
        .setColor('#ce4040')
        .addFields(
            selectedPeople.map(person => ({
                name: person.name,
                value: ' ',
                inline: true
            }))
        );

    const row = new ActionRowBuilder()
        .addComponents(
            selectedPeople.map((person, index) =>
                new ButtonBuilder()
                    .setCustomId(`choice${index + 1}`)
                    .setLabel(person.name)
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üòä')
            )
        );

    await interaction.reply({
        embeds: [embed],
        components: [row],
    });

    const filter = i => i.customId.startsWith('choice') && i.user.id === interaction.user.id;
    const collector = interaction.channel.createMessageComponentCollector({ filter, time: 60000 });
    const randomImage = image[Math.floor(Math.random() * image.length)];
    collector.on('collect', async i => {
        const choiceIndex = parseInt(i.customId.replace('choice', '')) - 1;
        const selectedPerson = selectedPeople[choiceIndex];

        const responseEmbed = new EmbedBuilder()
            .setTitle('TrƒÉm nƒÉm h·∫°nh fuck')
            .setDescription(selectedPerson.response)
            .setColor('#ce4040')
            .setImage(randomImage);

        await i.update({
            embeds: [responseEmbed],
            components: [],
        });
        collector.stop();
    });
    collector.on('end', collected => {
        if (collected.size === 0) {
            interaction.editReply({
                content: 'Ch·ªçn ny m√† l·ªÅ m√† l·ªÅ m·ªÅ, t·ª± t√¨m ng∆∞·ªùi iu ƒëi m√°',
                embeds: [],
                components: [],
            });
        }
    });
}